  Start      End
2242:0000 2242:855F
#l 0-20
0000 MOV    AX,23C1
0003 MOV    DS,AX
0005 MOV    ES,AX
0007 MOV    [0004],SP
000B MOV    AX,0002	# Set cursor position
000E INT    10

0010 CALL   0F6A

0013 MOV    CX,0000
0016 MOV    DX,184F
0019 MOV    AX,0600	# Clear screen
001C MOV    BX,0700
001F INT    10

0021 MOV    DX,0007
0024 CALL   0FB4	# *** MENU ***
0027 MOV    DX,0016
002A CALL   0FB4	# [F1]  DUMP ( TRANSFERS TB DATA TO A COMPUTER )
002D MOV    DX,0047
0030 CALL   0FB4	# [F2]  NOTE ( INPUTS NOTE TO TB )
0033 MOV    DX,006A
0036 CALL   0FB4	# [F3]  SAVE ( SAVES DATA ON DISK )
0039 MOV    DX,008E
003C CALL   0FB4	# [F4]  LOAD ( LOADS DATA FROM DISK )
003F MOV    DX,00B4
0042 CALL   0FB4	# [F5]  DISP ( DISPLAYS DATA )
0045 MOV    DX,00D3
0048 CALL   0FB4	#       PRINT    : PRINTS OUT ALL DATA
004B MOV    DX,00F1
004E CALL   0FB4	#       COPY     : ONLY PRINTS DATA ON THE SCREEN
0051 MOV    DX,011A
0054 CALL   0FB4	#       NOTE     : EDITS NOTE DATA
0057 MOV    DX,0134
005A CALL   0FB4	#       SEARCH   : DATA SEARCH BY FRAME,NO. OR NOTE
005D MOV    DX,015F
0060 CALL   0FB4	#       (NEXT)   : CONTINUES DATA SEARCH
0063 MOV    DX,017F
0066 CALL   0FB4	# [F8]  END ( RETURNS TO DOS )
0069 MOV    DX,01B2	# [F1] DUMP  [F2] NOTE  [F3] SAVE  [F4] LOAD  [F5] DISP
006C CALL   0FB4	# [F6]       [F7]       [F8] END   [F9]       [F10]
006F MOV    BYTE [0006],00
0074 MOV    WORD [0A44],019E
007A CALL   0FCD	# getchar()
007D JMPS   007A
007F CALL   0F72

0082 MOV    AH,4C	# Terminate process
0084 INT    21

0086 MOV    CX,0000
0089 MOV    DX,184F
008C MOV    AX,0600	# Clear part of screen
008F MOV    BX,0700
0092 INT    10

0094 MOV    BYTE [0006],01
0099 MOV    BYTE [05B1],00
009E MOV    BYTE [0248],00
00A3 MOV    BYTE [0249],00
00A8 MOV    BX,0F35	# buffer+195
00AB MOV    [0502],BX
00AF CALL   0406
00B2 CALL   01C4
00B5 TEST   BYTE [0249],80
00BA JZ     00D8
00BC TEST   BYTE [05B1],04
00C1 JNZ    00D8
00C3 MOV    DH,[0249]
00C7 AND    DH,07
00CA MOV    DL,DH
00CC SHL    DL,1
00CE ADD    DH,DL
00D0 XOR    DL,DL
00D2 CALL   0FC4
00D5 CALL   0F7A

00D8 MOV    CL,00
00DA MOV    CH,13
00DC MOV    DL,4F
00DE MOV    DH,16
00E0 MOV    AX,0600	# Clear part of screen
00E3 MOV    BX,0700
00E6 INT    10

00E8 CALL   0FCD	# getchar()
00EB JNB    00D8
00ED CMP    AL,50
00EF JNZ    0153
00F1 TEST   BYTE [0249],80
00F6 JZ     0146
00F8 MOV    SI,[024A]
00FC CALL   0252
00FF CMP    AL,00
0101 JZ     010B

0103 MOV    DL,07
0105 MOV    AH,02	# putc(BELL)
0107 INT    21

0109 JMPS   00D8
010B MOV    [024A],SI
010F MOV    BL,[0249]
0113 AND    BX,0007
0117 ADD    CX,BX
0119 CMP    CX,0006
011C JA     0129
011E AND    BYTE [0249],F8
0123 OR     [0249],CL
0127 JMPS   00B2
0129 AND    BYTE [0249],F8
012E OR     BYTE [0249],06
0133 SUB    CX,0006
0136 MOV    AX,[0504]
0139 MOV    [0502],AX
013C PUSH   CX
013D CALL   054A
0140 POP    CX
0141 LOOP   013C
0143 JMP    00AF
0146 TEST   BYTE [05B1],02
014B JNZ    00D8
014D CALL   054A
0150 JMP    00AF
0153 CMP    AL,48
0155 JZ     015A
0157 JMP    00D8
015A TEST   BYTE [0249],80
015F JZ     01A7
0161 MOV    SI,[024A]
0165 CALL   0272
0168 CMP    AL,00
016A JZ     0175

016C MOV    DL,07
016E MOV    AH,02	# putc(BELL)
0170 INT    21

0172 JMP    00D8
0175 MOV    [024A],SI
0179 MOV    BL,[0249]
017D AND    BX,0007
0181 SUB    BX,CX
0183 JBE    0191
0185 AND    BYTE [0249],F8
018A OR     [0249],BL
018E JMP    00B2
0191 AND    BYTE [0249],F8
0196 OR     BYTE [0249],01
019B MOV    [0502],SI
019F AND    BYTE [05B1],F9
01A4 JMP    00AF
01A7 TEST   BYTE [05B1],01
01AC JZ     01B1
01AE JMP    00D8
01B1 MOV    AX,[0504]
01B4 MOV    [0502],AX
01B7 MOV    CX,0006
01BA PUSH   CX
01BB CALL   0564
01BE POP    CX
01BF LOOP   01BA
01C1 JMP    00AF
01C4 CALL   0F6A
01C7 TEST   BYTE [0249],80
01CC JNZ    0203
01CE TEST   BYTE [0248],80
01D3 JNZ    01E2

[F1] DUMP      [F2]           [F3] SAVE      [F4] LOAD      [F5]
[F6] PRINT     [F7] COPY      [F8] NOTE      [F9] SEARCH    [F10] MENU
01D5 MOV    DX,0260
01D8 CALL   0FB4
01DB MOV    WORD [0A44],024C
01E1 RET    

01E2 TEST   BYTE [0248],07
01E7 JZ     01F6

[F1] DUMP      [F2]           [F3] SAVE      [F4] LOAD      [F5] NEXT
[F6] PRINT     [F7] COPY      [F8] NOTE      [F9] SEARCH    [F10] MENU
01E9 MOV    DX,0309
01EC CALL   0FB4
01EF MOV    WORD [0A44],02F5
01F5 RET    


[F1] FR        [F2] NO.       [F3] NOTE      [F4]           [F5] DISP
[F6]           [F7]           [F8]           [F9]           [F10] MENU
01F6 MOV    DX,03AF
01F9 CALL   0FB4
01FC MOV    WORD [0A44],039B
0202 RET    


[F1] SET       [F2]           [F3]           [F4]           [F5] DISP
[F6]           [F7]           [F8]           [F9]           [F10] MENU
0203 MOV    DX,0455
0206 CALL   0FB4
0209 MOV    WORD [0A44],0441
020F RET    

0210 MOV    BYTE [0248],80
0215 JMP    00B2
0218 AND    BYTE [0248],00
021D JMP    00B2
0220 TEST   BYTE [05B1],04
0225 JNZ    0247
0227 MOV    SI,[0504]
022B MOV    CX,0001
022E CALL   0260
0231 CMP    AL,00
0233 JNZ    0247
0235 CMP    CX,0006
0238 JA     0247
023A MOV    [0249],CL
023E MOV    [024A],SI
0242 OR     BYTE [0249],80
0247 JMP    00B2
024A MOV    BYTE [0249],00
024F JMP    00B2
0252 XOR    CX,CX
0254 INC    CX
0255 MOV    DI,SI
0257 PUSH   CX
0258 CALL   0578
025B POP    CX
025C MOV    SI,DI
025E JB     026F
0260 PUSH   CX
0261 CALL   0532
0264 POP    CX
0265 TEST   BYTE [0506],80
026A JNZ    0254
026C XOR    AL,AL
026E RET    

026F MOV    AL,01
0271 RET    

0272 XOR    CX,CX
0274 MOV    DI,SI
0276 PUSH   CX
0277 CALL   058B
027A POP    CX
027B MOV    SI,DI
027D JB     028F
027F INC    CX
0280 PUSH   CX
0281 CALL   0532
0284 POP    CX
0285 TEST   BYTE [0506],80
028A JNZ    0274
028C XOR    AL,AL
028E RET    

028F MOV    AL,01
0291 RET    

0292 CMP    BYTE [0006],01
0297 JNZ    029C
0299 JMP    00B2
029C JMP    0086
029F CMP    BYTE [0006],01
02A4 JNZ    02A9
02A6 JMP    00B2
02A9 JMP    0086

02AC MOV    CL,00
02AE MOV    CH,13
02B0 MOV    DL,4F
02B2 MOV    DH,16
02B4 MOV    AX,0600	# Clear part of screen
02B7 MOV    BX,0700
02BA INT    10

02BC MOV    SI,[0504]
02C0 CMP    BYTE [SI],FF
02C3 JZ     031D
02C5 CALL   03C3
02C8 JNZ    0322
02CA MOV    SI,[0504]
02CE MOV    CX,0006
02D1 PUSH   CX
02D2 PUSH   SI
02D3 CALL   04AE
02D6 MOV    SI,0507
02D9 CALL   101C
02DC JNZ    0320
02DE MOV    AL,0D
02E0 CALL   1048
02E3 JNZ    0320
02E5 MOV    AL,0A
02E7 CALL   1048
02EA JNZ    0320
02EC MOV    SI,055C
02EF CALL   101C
02F2 JNZ    0320
02F4 MOV    AL,0D
02F6 CALL   1048
02F9 JNZ    0320
02FB MOV    AL,0A
02FD CALL   1048
0300 JNZ    0320
0302 MOV    AL,0D
0304 CALL   1048
0307 JNZ    0320
0309 MOV    AL,0A
030B CALL   1048
030E JNZ    0320
0310 POP    SI
0311 XCHG   SI,DI
0313 CALL   0578
0316 XCHG   SI,DI
0318 POP    CX
0319 JB     031D
031B LOOP   02D1
031D JMP    00B2
0320 POP    SI
0321 POP    CX
0322 MOV    DX,04F5
0325 CALL   0FB4	# COPY ERROR
0328 JMP    00E8
032B MOV    CL,00
032D MOV    CH,13
032F MOV    DL,4F
0331 MOV    DH,16
0333 MOV    AX,0600	# Clear part of screen
0336 MOV    BX,0700
0339 INT    10

033B CMP    BYTE [0F35],FF	# empty buffer?
0340 JZ     03B6
0342 CALL   03C3
0345 JNZ    03BA
0347 MOV    SI,0F35		# SI := buffer + 195
034A JMPS   036A
034C MOV    AH,[SI]
034E AND    AX,3F3F
0351 CMP    AH,AL
0353 JNB    036A
0355 MOV    AL,0D
0357 CALL   1048
035A JNZ    03BA
035C MOV    AL,0A
035E CALL   1048
0361 JNZ    03BA
0363 PUSH   SI
0364 CALL   03C3
0367 POP    SI
0368 JNZ    03BA
036A PUSH   SI
036B CALL   04AE
036E MOV    SI,0507
0371 CALL   101C
0374 JNZ    03B9
0376 MOV    AL,0D
0378 CALL   1048
037B JNZ    03B9
037D MOV    AL,0A
037F CALL   1048
0382 JNZ    03B9
0384 MOV    SI,055C
0387 CALL   101C
038A MOV    AL,0D
038C CALL   1048
038F JNZ    03B9
0391 MOV    AL,0A
0393 CALL   1048
0396 JNZ    03B9
0398 MOV    AL,0D
039A CALL   1048
039D JNZ    03B9
039F MOV    AL,0A
03A1 CALL   1048
03A4 JNZ    03B9
03A6 POP    SI
03A7 MOV    AL,[SI]
03A9 PUSH   AX
03AA XCHG   SI,DI
03AC CALL   0578
03AF XCHG   SI,DI
03B1 POP    AX
03B2 JB     03B6
03B4 JMPS   034C
03B6 JMP    00B2
03B9 POP    SI
03BA MOV    DX,04E7
03BD CALL   0FB4	# PRINT ERROR
03C0 JMP    00E8
03C3 MOV    SI,05F6
03C6 CALL   101C
03C9 JNZ    03ED
03CB MOV    AL,0D
03CD CALL   1048
03D0 JNZ    03ED
03D2 MOV    AL,0A
03D4 CALL   1048
03D7 JNZ    03ED
03D9 MOV    SI,0642
03DC CALL   101C
03DF JNZ    03ED
03E1 MOV    AL,0D
03E3 CALL   1048
03E6 JNZ    03ED
03E8 MOV    AL,0A
03EA CALL   1048
03ED RET    

03EE TEST   BYTE [05B1],04
03F3 JZ     03FD
03F5 OR     BYTE [0248],20
03FA JMP    0AB3
03FD MOV    AX,[0504]
0400 MOV    [0734],AX
0403 JMP    0AB3
0406 CALL   0F6A
0409 AND    BYTE [05B1],FA
040E MOV    AX,[0502]
0411 MOV    [0504],AX
0414 MOV    AX,0F35		# AX := buffer + 195
0417 CMP    [0502],AX
041B JNZ    0422
041D OR     BYTE [05B1],01
0422 CMP    BYTE [0F35],FF	# buffer[195] == 0xFF ?
0427 JNZ    042E
0429 OR     BYTE [05B1],02
042E MOV    CL,00
0430 MOV    CH,02
0432 MOV    DL,4F
0434 MOV    DH,12
0436 MOV    AX,0600	# Clear part of screen
0439 MOV    BX,0700
043C INT    10

043E XOR    DX,DX
0440 CALL   0FC4
0443 MOV    SI,05F6
0446 CALL   0F82

0449 MOV    DX,0665
044C MOV    AH,09	# puts()
044E INT    21

0450 MOV    SI,0642
0453 CALL   0F82
0456 MOV    DX,0665
0459 MOV    AH,09	# puts()
045B INT    21

045D TEST   BYTE [05B1],02
0462 JZ     046B
0464 OR     BYTE [05B1],04
0469 JMPS   047D
046B MOV    CX,0006
046E PUSH   CX
046F CALL   0485
0472 POP    CX
0473 DEC    CX
0474 JZ     0484
0476 PUSH   CX
0477 CALL   054A
047A POP    CX
047B JNB    046E

047D MOV    DX,05D5
0480 MOV    AH,09	# puts()
0482 INT    21
0484 RET    

0485 MOV    SI,[0502]
0489 CALL   04AE
048C MOV    SI,0507
048F CALL   0F82
0492 MOV    DX,0665
0495 MOV    AH,09	# puts()
0497 INT    21

0499 MOV    SI,055C
049C CALL   0F82
049F MOV    DX,0665
04A2 MOV    AH,09	# puts()
04A4 INT    21
04A6 MOV    DX,0665
04A9 MOV    AH,09	# puts()
04AB INT    21
04AD RET    

04AE XOR    AL,AL
04B0 MOV    AH,0C	# flush input buffer
04B2 INT    21

04B4 MOV    AL,20
04B6 MOV    DI,0507
04B9 MOV    CX,00AA
04BC REP    STOSB  
04BE CALL   0532
04C1 MOV    DI,0508
04C4 CALL   067F
04C7 MOV    DI,050D
04CA CALL   06A2
04CD MOV    DI,0510
04D0 CALL   06AA
04D3 MOV    DI,0516
04D6 CALL   06C8
04D9 MOV    DI,051D
04DC CALL   07BE
04DF MOV    DI,0525
04E2 CALL   079A
04E5 MOV    DI,052A
04E8 CALL   07CC
04EB MOV    DI,052F
04EE CALL   07E7
04F1 MOV    DI,0534
04F4 CALL   06E6
04F7 MOV    DI,053F
04FA CALL   076C
04FD MOV    DI,054B
0500 CALL   0849
0503 MOV    DI,0552
0506 CALL   089F
0509 MOV    BYTE [0556],FF
050E MOV    DI,055D
0511 CALL   08BD
0514 MOV    DI,0581
0517 CALL   0809
051A MOV    DI,0599
051D CALL   08FF
0520 MOV    DI,058E
0523 CALL   0928
0526 MOV    DI,05A0
0529 CALL   0865
052C MOV    BYTE [05AB],FF
0531 RET    

0532 XOR    AH,AH
0534 CMP    BYTE 07[SI],FF
0538 JZ     0542
053A MOV    AH,10[SI]
053D AND    AH,37
0540 JMPS   0545
0542 OR     AH,80
0545 MOV    [0506],AH
0549 RET    

054A AND    BYTE [05B1],FD
054F MOV    DI,[0502]
0553 CALL   0578
0556 MOV    [0502],DI
055A JB     055D
055C RET    

055D OR     BYTE [05B1],02
0562 STC    		# SeT Carry Flag
0563 RET    

0564 AND    BYTE [05B1],F9
0569 MOV    DI,[0502]
056D CALL   058B
0570 JNB    0573
0572 RET    

0573 MOV    [0502],DI
0577 RET    

0578 MOV    CX,0036
057B MOV    AL,FF
057D CLD    
057E REPNE  SCASB  
0580 JNZ    0589
0582 CMP    BYTE [DI],FF
0585 JZ     0589
0587 CLC    		# CLear Carry
0588 RET    

0589 STC    		# SeT Carry Flag
058A RET    

058B MOV    CX,0036
058E MOV    AL,FF
0590 MOV    BX,0F35	# BX := buffer + 195
0593 DEC    DI
0594 DEC    DI
0595 CMP    DI,BX
0597 JBE    05AC
0599 STD    
059A REPNE  SCASB  
059C JNZ    05A7
059E CMP    DI,BX
05A0 JBE    05A7
05A2 INC    DI
05A3 INC    DI
05A4 CLD    
05A5 CLC    		# CLear Carry
05A6 RET    

05A7 MOV    DI,BX
05A9 CLD    
05AA CLC    		# CLear Carry
05AB RET    

05AC MOV    DI,BX
05AE CLD    
05AF STC    		# SeT Carry Flag
05B0 RET    

05B1 AND    AH,AH
05B3 JNZ    05BF
05B5 TEST   AL,F0
05B7 JNZ    05BF
05B9 MOV    AH,AL
05BB MOV    AL,00
05BD JMPS   05C7
05BF MOV    AH,AL
05C1 MOV    CL,04
05C3 SHR    AL,CL
05C5 OR     AL,30
05C7 AND    AH,0F
05CA OR     AH,30
05CD CMP    AL,00
05CF JZ     05D3
05D1 STOSW  
05D2 RET    

05D3 INC    DI
05D4 XCHG   AL,AH
05D6 STOSB  
05D7 RET    

05D8 CMP    BL,00
05DB JZ     05EB
05DD CMP    AH,46
05E0 JZ     05E7
05E2 CMP    AH,66
05E5 JNZ    05EB
05E7 MOV    AH,F0
05E9 JMPS   05F9
05EB CMP    AH,30
05EE JB     0608
05F0 CMP    AH,39
05F3 JA     0608
05F5 MOV    CL,04
05F7 SHL    AH,CL
05F9 CMP    AL,30
05FB JB     0608
05FD CMP    AL,39
05FF JA     0608
0601 AND    AL,0F
0603 OR     AL,AH
0605 STOSB  
0606 CLC    		# CLear Carry
0607 RET    

0608 STC    		# SeT Carry Flag
0609 RET    

060A XOR    CX,CX
060C MOV    BX,AX
060E SUB    AX,03E8
0611 JB     0617
0613 INC    CL
0615 JMPS   060C
0617 CMP    CL,00
061A JZ     0624
061C MOV    AL,CL
061E OR     AL,30
0620 MOV    [DI],AL
0622 INC    CH
0624 INC    DI
0625 XOR    CL,CL
0627 MOV    AX,BX
0629 MOV    BX,AX
062B SUB    AX,0064
062E JB     0634
0630 INC    CL
0632 JMPS   0629
0634 CMP    CX,0000
0637 JZ     0641
0639 MOV    AL,CL
063B OR     AL,30
063D MOV    [DI],AL
063F INC    CH
0641 INC    DI
0642 XOR    CL,CL
0644 MOV    AL,BL
0646 MOV    BL,AL
0648 SUB    AL,0A
064A JB     0650
064C INC    CL
064E JMPS   0646
0650 CMP    CX,0000
0653 JZ     065B
0655 MOV    AL,CL
0657 OR     AL,30
0659 MOV    [DI],AL
065B INC    DI
065C MOV    AL,BL
065E OR     AL,30
0660 CLD    
0661 STOSB  
0662 RET    

0663 PUSH   DS
0664 PUSH   CS
0665 POP    DS
0666 MOV    CL,[SI]
0668 XOR    CH,CH
066A INC    SI
066B CMP    BYTE [SI],FF
066E JZ     0678
0670 CMP    [SI],AL
0672 JZ     0678
0674 ADD    SI,CX
0676 JMPS   066B
0678 INC    SI
0679 DEC    CX
067A CLD    
067B REP    MOVSB  
067D POP    DS
067E RET    

067F MOV    AL,01[SI]
0682 PUSH   AX
0683 AND    AL,F0
0685 CMP    AL,F0
0687 JNZ    0693
0689 MOV    BYTE [DI],66
068C POP    AX
068D XOR    AH,AH
068F AND    AL,0F
0691 JMPS   0696
0693 POP    AX
0694 MOV    AH,01
0696 CALL   05B1
0699 MOV    AL,02[SI]
069C MOV    AH,01
069E CALL   05B1
06A1 RET    

06A2 MOV    AL,[SI]
06A4 XOR    AH,AH
06A6 CALL   05B1
06A9 RET    

06AA MOV    AL,03[SI]
06AD AND    AL,FC
06AF PUSH   SI
06B0 MOV    SI,152A
06B3 CALL   0663
06B6 POP    SI
06B7 TEST   BYTE [0506],80
06BC JNZ    06C7
06BE TEST   BYTE 07[SI],40
06C2 JZ     06C7
06C4 MOV    BYTE [DI],2A
06C7 RET    

06C8 MOV    AL,04[SI]
06CB AND    AL,7C
06CD PUSH   SI
06CE MOV    SI,15FD
06D1 CALL   0663
06D4 POP    SI
06D5 TEST   BYTE [0506],80
06DA JNZ    06E5
06DC TEST   BYTE 07[SI],20
06E0 JZ     06E5
06E2 MOV    BYTE [DI],2A
06E5 RET    

06E6 TEST   BYTE [0506],80
06EB JNZ    075E
06ED MOV    AL,[0F34]
06F0 AND    AL,0C
06F2 JZ     0720
06F4 CMP    AL,04
06F6 JZ     073F
06F8 CMP    AL,08
06FA JNZ    075E
06FC PUSH   SI
06FD MOV    AL,0A[SI]
0700 MOV    SI,17BF
0703 CALL   0663
0706 POP    SI
0707 MOV    BYTE [DI],2E
070A INC    DI
070B MOV    BX,000B
070E CALL   0764
0711 MOV    BYTE [DI],2C
0714 INC    DI
0715 MOV    BYTE [DI],27
0718 INC    DI
0719 MOV    BX,0009
071C CALL   0764
071F RET    

0720 MOV    BYTE [DI],27
0723 INC    DI
0724 MOV    BX,0009
0727 CALL   0764
072A MOV    BYTE [DI],2F
072D INC    DI
072E MOV    BX,000A
0731 CALL   0764
0734 MOV    BYTE [DI],2F
0737 INC    DI
0738 MOV    BX,000B
073B CALL   0764
073E RET    

073F MOV    BX,000B
0742 CALL   0764
0745 MOV    BYTE [DI],2E
0748 INC    DI
0749 MOV    BX,000A
074C CALL   0764
074F MOV    BYTE [DI],2E
0752 INC    DI
0753 MOV    BYTE [DI],27
0756 INC    DI
0757 MOV    BX,0009
075A CALL   0764
075D RET    

075E MOV    CX,0008
0761 JMP    093F
0764 MOV    AL,[BX+SI]
0766 XOR    AH,AH
0768 CALL   05B1
076B RET    

076C TEST   BYTE [0506],80
0771 JNZ    0794
0773 MOV    AL,0C[SI]
0776 MOV    AH,01
0778 CALL   05B1
077B MOV    BYTE [DI],3A
077E INC    DI
077F MOV    AL,0D[SI]
0782 MOV    AH,01
0784 CALL   05B1
0787 MOV    BYTE [DI],3A
078A INC    DI
078B MOV    AL,0E[SI]
078E MOV    AH,01
0790 CALL   05B1
0793 RET    

0794 MOV    CX,0008
0797 JMP    093F
079A TEST   BYTE [0506],80
079F JNZ    07B8
07A1 PUSH   SI
07A2 MOV    AL,04[SI]
07A5 AND    AL,83
07A7 CMP    AL,80
07A9 JZ     07B6
07AB MOV    AL,07[SI]
07AE AND    AL,11
07B0 MOV    SI,17A5
07B3 CALL   0663
07B6 POP    SI
07B7 RET    

07B8 MOV    CX,0004
07BB JMP    093F
07BE PUSH   SI
07BF MOV    AL,04[SI]
07C2 AND    AL,83
07C4 MOV    SI,1766
07C7 CALL   0663
07CA POP    SI
07CB RET    

07CC TEST   BYTE [0506],80
07D1 JNZ    07E1
07D3 PUSH   SI
07D4 MOV    AL,08[SI]
07D7 AND    AL,7E
07D9 MOV    SI,1656
07DC CALL   0663
07DF POP    SI
07E0 RET    

07E1 MOV    CX,0004
07E4 JMP    093F
07E7 TEST   BYTE [0506],80
07EC JNZ    0803
07EE TEST   BYTE [0506],20
07F3 JZ     0803
07F5 PUSH   SI
07F6 MOV    AL,11[SI]
07F9 AND    AL,FC
07FB MOV    SI,16F7
07FE CALL   0663
0801 POP    SI
0802 RET    

0803 MOV    CX,0004
0806 JMP    093F
0809 PUSH   SI
080A MOV    SI,05BA
080D CALL   1010
0810 POP    SI
0811 TEST   BYTE 03[SI],01
0815 JZ     083D
0817 PUSH   SI
0818 TEST   BYTE [0506],80
081D JZ     0823
081F MOV    AL,00
0821 JMPS   0826
0823 MOV    AL,07[SI]
0826 PUSH   AX
0827 AND    AL,8C
0829 MOV    SI,178B
082C CALL   0663
082F INC    DI
0830 POP    AX
0831 TEST   AL,02
0833 JZ     083B
0835 MOV    SI,05C1
0838 CALL   1010
083B POP    SI
083C RET    

083D MOV    BYTE [DI],4F
0840 INC    DI
0841 MOV    BYTE [DI],46
0844 INC    DI
0845 MOV    BYTE [DI],46
0848 RET    

0849 MOV    AH,3D
084B MOV    AL,66
084D STOSW  
084E MOV    AX,05[SI]
0851 XCHG   AH,AL
0853 SHR    AX,1
0855 AND    AX,3FFF
0858 JZ     085E
085A CALL   060A
085D RET    

085E MOV    CX,0004
0861 CALL   093F
0864 RET    

0865 TEST   BYTE [0506],04
086A JZ     089E
086C PUSH   SI
086D ADD    SI,0011
0870 TEST   BYTE [0506],20
0875 JZ     0878
0877 INC    SI
0878 TEST   BYTE [0506],10
087D JZ     0880
087F INC    SI
0880 MOV    AX,[SI]
0882 XCHG   AH,AL
0884 SHR    AX,1
0886 AND    AH,3F
0889 CALL   060A
088C MOV    BYTE [DI],2D
088F INC    DI
0890 MOV    AX,02[SI]
0893 XCHG   AH,AL
0895 SHR    AX,1
0897 AND    AH,3F
089A CALL   060A
089D POP    SI
089E RET    

089F MOV    BYTE [DI],46
08A2 INC    DI
08A3 TEST   BYTE [0506],80
08A8 JNZ    08B6
08AA MOV    AL,0F[SI]
08AD PUSH   SI
08AE MOV    SI,15FD
08B1 CALL   0663
08B4 POP    SI
08B5 RET    

08B6 MOV    CX,0004
08B9 CALL   093F
08BC RET    

08BD PUSH   SI
08BE TEST   BYTE [0506],80
08C3 JNZ    08D5
08C5 PUSH   SI
08C6 MOV    SI,05B4
08C9 CALL   1010
08CC POP    SI
08CD CALL   08D7
08D0 JB     08D5
08D2 CALL   1010
08D5 POP    SI
08D6 RET    

08D7 ADD    SI,0011
08DA TEST   BYTE [0506],20
08DF JZ     08E2
08E1 INC    SI
08E2 TEST   BYTE [0506],10
08E7 JZ     08EA
08E9 INC    SI
08EA TEST   BYTE [0506],04
08EF JZ     08F4
08F1 ADD    SI,0004
08F4 TEST   BYTE [0506],02
08F9 JZ     08FD
08FB CLC    		# CLear Carry
08FC RET    

08FD STC    		# SeT Carry Flag
08FE RET    

08FF TEST   BYTE [0506],80
0904 JNZ    0927
0906 TEST   BYTE [0506],10
090B JZ     0927
090D PUSH   SI
090E MOV    SI,05CD
0911 CALL   1010
0914 POP    SI
0915 PUSH   SI
0916 ADD    SI,0011
0919 TEST   BYTE [0506],20
091E JZ     0921
0920 INC    SI
0921 MOV    AL,[SI]
0923 CALL   05B1
0926 POP    SI
0927 RET    

0928 TEST   BYTE [0506],80
092D JNZ    093E
092F TEST   BYTE [0506],01
0934 JZ     093E
0936 PUSH   SI
0937 MOV    SI,05D1
093A CALL   1010
093D POP    SI
093E RET    

093F MOV    AL,2D
0941 CLD    
0942 REP    STOSB  
0944 RET    

[F1] CANCEL    [F2]           [F3]           [F4]           [F5]
[F6]           [F7]           [F8]           [F9]           [F10] MENU
0945 MOV    DX,067C
0948 CALL   0FB4
094B MOV    WORD [0A44],0668
0951 MOV    SI,[024A]
0955 CALL   0532
0958 CALL   08D7
095B PUSH   SI
095C CALL   0F15
095F CALL   1010
0962 MOV    [05B2],BX
0966 MOV    BH,1E
0968 OR     BH,80
096B MOV    DH,[0249]
096F AND    DH,07
0972 MOV    DL,DH
0974 SHL    DL,1
0976 ADD    DH,DL
0978 MOV    DL,06
097A CALL   0DD2
097D XOR    BH,BH
097F MOV    SI,[024A]
0983 CMP    BX,0000
0986 JNZ    098E
0988 AND    BYTE 10[SI],FD
098C JMPS   0992
098E OR     BYTE 10[SI],02
0992 SUB    BX,[05B2]
0996 JZ     09D1
0998 JB     09B9
099A MOV    SI,0F35		# SI:=buffer+195
099D MOV    DI,SI
099F ADD    SI,[0E72]		# SI:=length of buffer
09A3 MOV    CX,SI
09A5 DEC    SI
09A6 ADD    [0E72],BX		# inc length of buffer
09AA ADD    DI,[0E72]		# inc DI
09AE DEC    DI
09AF POP    BX
09B0 PUSH   BX
09B1 SUB    CX,BX
09B3 STD    
09B4 REP    MOVSB  
09B6 CLD    
09B7 JMPS   09D1
09B9 POP    DI
09BA PUSH   DI
09BB MOV    SI,DI
09BD MOV    CX,0F35		# 0x0E72+2+192+1
09C0 ADD    CX,[0E72]		# add length of buffer to counter
09C4 ADD    [0E72],BX
09C8 NEG    BX
09CA ADD    SI,BX
09CC SUB    CX,SI
09CE CLD    
09CF REP    MOVSB  
09D1 MOV    SI,0A4A
09D4 POP    DI
09D5 CALL   1010
09D8 MOV    BYTE [DI],FF
09DB JMP    00B2
09DE MOV    DH,[0249]
09E2 AND    DH,07
09E5 MOV    DL,DH
09E7 SHL    DL,1
09E9 ADD    DH,DL
09EB MOV    DL,06
09ED CALL   0FC4
09F0 MOV    SI,[024A]
09F4 CALL   0532
09F7 CALL   08D7
09FA MOV    DX,SI
09FC CALL   0F82
09FF MOV    CX,001E
0A02 SUB    CX,[05B2]
0A06 JZ     0A10

0A08 MOV    DL,20
0A0A MOV    AH,02	# putc(' ')
0A0C INT    21
0A0E LOOP   0A08

0A10 JMP    00B2
0A13 OR     BYTE [0248],01
0A18 MOV    DX,0761
0A1B CALL   0FB4	# NO. :
0A1E MOV    BH,04
0A20 CALL   0AF4
0A23 OR     BL,BL
0A25 JZ     0A13
0A27 MOV    SI,0A4A
0A2A XOR    BH,BH
0A2C ADD    SI,BX
0A2E DEC    SI
0A2F MOV    AX,3030
0A32 MOV    AL,[SI]
0A34 DEC    BX
0A35 JZ     0A3B
0A37 MOV    AH,FF[SI]
0A3A DEC    BX
0A3B MOV    DI,0714
0A3E PUSH   BX
0A3F PUSH   SI
0A40 CALL   05D8
0A43 POP    SI
0A44 POP    BX
0A45 JB     0A13
0A47 MOV    AX,3030
0A4A MOV    DI,0713
0A4D OR     BX,BX
0A4F JZ     0A5A
0A51 MOV    AL,FE[SI]
0A54 DEC    BX
0A55 JZ     0A5A
0A57 MOV    AH,FD[SI]
0A5A CALL   05D8
0A5D JB     0A13
0A5F JMPS   0AAB
0A61 OR     BYTE [0248],02
0A66 MOV    DX,0758
0A69 CALL   0FB4	# FR  :
0A6C MOV    BX,0200
0A6F CALL   0AF4
0A72 MOV    AX,[0A4A]
0A75 CMP    BL,02
0A78 JZ     0A7E
0A7A MOV    AH,30
0A7C JMPS   0A80
0A7E XCHG   AL,AH
0A80 XOR    BL,BL
0A82 MOV    DI,0712
0A85 CALL   05D8
0A88 JB     0A61
0A8A JMPS   0AAB
0A8C OR     BYTE [0248],03
0A91 MOV    DX,076A
0A94 CALL   0FB4	# NOTE :
0A97 MOV    BX,1E00
0A9A CALL   0AF4
0A9D MOV    SI,0A4A
0AA0 MOV    DI,0715
0AA3 CALL   1010
0AA6 MOV    BYTE [DI],FF
0AA9 JMPS   0AAB
0AAB CALL   0B12
0AAE CALL   0B23
0AB1 JNB    0AD9
0AB3 MOV    CL,00
0AB5 MOV    CH,17
0AB7 MOV    DL,4F
0AB9 MOV    DH,18
0ABB MOV    AX,0600	# Clear part of screen
0ABE MOV    BX,0700
0AC1 INT    10

0AC3 TEST   BYTE [0248],20
0AC8 JNZ    0AAB
0ACA CALL   0B95
0ACD JNB    0AAE
0ACF TEST   BYTE [0248],40
0AD4 JNZ    0AEC
0AD6 JMP    00AF
0AD9 AND    BYTE [0248],BF
0ADE MOV    AX,[0734]
0AE1 MOV    [0502],AX
0AE4 AND    BYTE [05B1],F9
0AE9 JMP    00AF
0AEC MOV    BYTE [0248],00
0AF1 JMP    00AF
0AF4 PUSH   BX
0AF5 MOV    DX,0736
0AF8 CALL   0FB4	# DATA SEARCH : INPUT SEARCH DATA

[F1]           [F2]           [F3]           [F4]           [F5] DISP
[F6]           [F7]           [F8]           [F9]           [F10] MENU
0AFB MOV    DX,0796
0AFE CALL   0FB4
0B01 MOV    WORD [0A44],0782
0B07 MOV    DL,0F
0B09 MOV    DH,15
0B0B POP    BX
0B0C XOR    BL,BL
0B0E CALL   0DD2
0B11 RET    

0B12 AND    BYTE [0248],83
0B17 OR     BYTE [0248],40
0B1C MOV    WORD [0734],0F35	# *0x0734:=buffer+195
0B22 RET    

0B23 MOV    AL,[0248]
0B26 AND    AL,03
0B28 CMP    AL,03
0B2A JZ     0B5D
0B2C CMP    AL,02
0B2E JZ     0B4D
0B30 MOV    SI,[0734]
0B34 MOV    AX,01[SI]
0B37 MOV    BX,AX
0B39 AND    BL,F0
0B3C CMP    BL,F0
0B3F JNZ    0B43
0B41 AND    AL,0F
0B43 CMP    [0713],AX
0B47 JNZ    0B4B
0B49 CLC    		# CLear Carry
0B4A RET    

0B4B STC    		# SeT Carry Flag
0B4C RET    

0B4D MOV    SI,[0734]
0B51 MOV    AL,[SI]
0B53 CMP    [0712],AL
0B57 JNZ    0B5B
0B59 CLC    		# CLear Carry
0B5A RET    

0B5B STC    		# SeT Carry Flag
0B5C RET    

0B5D MOV    SI,[0734]
0B61 CALL   0532
0B64 TEST   BYTE [0506],80
0B69 JNZ    0B93
0B6B CALL   08D7
0B6E JB     0B93
0B70 MOV    DI,0715
0B73 XCHG   DI,SI
0B75 CMP    BYTE [DI],FF
0B78 JZ     0B93
0B7A PUSH   SI
0B7B PUSH   DI
0B7C MOV    AL,[SI]
0B7E CMP    AL,FF
0B80 JZ     0B8F
0B82 CMP    [DI],AL
0B84 JNZ    0B8A
0B86 INC    SI
0B87 INC    DI
0B88 JMPS   0B7C
0B8A POP    DI
0B8B POP    SI
0B8C INC    DI
0B8D JMPS   0B75
0B8F POP    DI
0B90 POP    SI
0B91 CLC    		# CLear Carry
0B92 RET    

0B93 STC    		# SeT Carry Flag
0B94 RET    

0B95 AND    BYTE [05B1],FD
0B9A MOV    DI,[0734]
0B9E CALL   0578
0BA1 MOV    [0734],DI
0BA5 JB     0BA8
0BA7 RET    

0BA8 OR     BYTE [0248],20
0BAD OR     BYTE [05B1],06
0BB2 MOV    [0502],DI
0BB6 STC    		# SeT Carry Flag
0BB7 RET    

0BB8 MOV    CL,00
0BBA MOV    CH,14
0BBC MOV    DL,4F
0BBE MOV    DH,16
0BC0 MOV    AX,0600	# Clear part of screen
0BC3 MOV    BX,0700
0BC6 INT    10

0BC8 MOV    DX,0842
0BCB CALL   0FB4	# SAVE :
0BCE MOV    BYTE [082C],00
0BD3 CALL   0D5A

0BD6 MOV    DX,082D
0BD9 MOV    AL,00
0BDB MOV    AH,3D	# open file for read
0BDD INT    21
0BDF MOV    [082A],AX	# store filehandle
0BE2 JB     0C0B

0BE4 MOV    BX,[082A]
0BE8 MOV    AH,3E	# close(BX)
0BEA INT    21

0BEC MOV    DX,0880
0BEF CALL   0FB4	# ALREADY EXISTS, DELETE OLD ?

[F1] YES       [F2] NO        [F3]           [F4]           [F5] DISP
[F6]           [F7]           [F8]           [F9]           [F10] MENU
0BF2 MOV    DX,09A1
0BF5 CALL   0FB4
0BF8 MOV    WORD [0A44],098D
0BFE CALL   0FCD	# getchar()
0C01 JMPS   0BFE
0C03 MOV    DX,08B0
0C06 CALL   0FB4	# YES
0C09 JMPS   0C10
0C0B CMP    AX,0002
0C0E JNZ    0C7A
0C10 MOV    CL,00
0C12 MOV    CH,17
0C14 MOV    DL,4F
0C16 MOV    DH,18
0C18 MOV    AX,0600	# Clear part of screen
0C1B MOV    BX,0700
0C1E INT    10

0C20 MOV    DX,082D
0C23 MOV    CX,0000
0C26 MOV    AH,3C	# create read only file
0C28 INT    21
0C2A MOV    [082A],AX	# store filehandle
0C2D JNB    0C34
0C2F CALL   0C7A
0C32 JMPS   0BB8
0C34 MOV    BX,[082A]	# get filehandle
0C38 MOV    DX,0E72	# buffer
0C3B MOV    CX,0002	# 2 bytes
0C3E MOV    AH,40	# write file
0C40 INT    21
0C42 CMP    AX,0002	# 2 bytes transferred?
0C45 JNZ    0C9E

0C47 MOV    BX,[082A]	# get filehandle
0C4B MOV    DX,0E74	# 0x0E72+2
0C4E MOV    CX,00C1	# 193 bytes
0C51 MOV    AH,40	# write file
0C53 INT    21
0C55 CMP    AX,00C1	# 193 bytes transferred?
0C58 JNZ    0C9E

0C5A MOV    BX,[082A]	# get filehandle
0C5E MOV    DX,0F35	# 0x0E72+2+192+1
0C61 MOV    CX,[0E72]	# length of buffer
0C65 MOV    AH,40	# write file
0C67 INT    21
0C69 CMP    AX,[0E72]	# all written?
0C6D JNZ    0C9E

0C6F MOV    BX,[082A]
0C73 MOV    AH,3E	# close(BX)
0C75 INT    21
0C77 JMP    0292

0C7A PUSH   AX
0C7B MOV    DX,08C2
0C7E CALL   0FB4	# ERROR  
0C81 POP    AX

0C82 OR     AL,30
0C84 MOV    DL,AL
0C86 MOV    AH,02	# putc(AL | 0x30)
0C88 INT    21
0C8A JMP    0BB8

0C8D MOV    DX,08B6
0C90 CALL   0FB4	# DISK FULL
0C93 MOV    BX,[082A]
0C97 MOV    AH,3E	# close(BX)
0C99 INT    21
0C9B JMP    0BB8

0C9E MOV    BX,[082A]
0CA2 MOV    AH,3E	# close(BX)
0CA4 INT    21
0CA6 MOV    DX,08CC
0CA9 CALL   0FB4	# WRITE ERROR
0CAC JMP    0BB8

0CAF MOV    CL,00
0CB1 MOV    CH,14
0CB3 MOV    DL,4F
0CB5 MOV    DH,16
0CB7 MOV    AX,0600	# Clear part of screen
0CBA MOV    BX,0700
0CBD INT    10

0CBF MOV    DX,084B
0CC2 CALL   0FB4	# LOAD :
0CC5 MOV    BYTE [082C],00
0CCA CALL   0D5A
0CCD MOV    CL,1E
0CCF MOV    CH,15
0CD1 MOV    DL,4F
0CD3 MOV    DH,15
0CD5 MOV    AX,0600	# Clear part of screen
0CD8 MOV    BX,0700
0CDB INT    10

0CDD MOV    DX,082D
0CE0 MOV    AL,00
0CE2 MOV    AH,3D	# open file for read
0CE4 INT    21
0CE6 MOV    [082A],AX	# store filehandle
0CE9 JNB    0CF3	# jump if found

0CEB MOV    DX,089F
0CEE CALL   0FB4	# FILE NOT FOUND
0CF1 JMPS   0CCA
0CF3 MOV    CL,00
0CF5 MOV    CH,17
0CF7 MOV    DL,4F
0CF9 MOV    DH,18
0CFB MOV    AX,0600	# Clear part of screen
0CFE MOV    BX,0700
0D01 INT    10

0D03 MOV    BX,[082A]	# filehandle
0D07 MOV    DX,0E72	# into bufferlength
0D0A MOV    CX,0002
0D0D MOV    AH,3F	# read 2 bytes
0D0F INT    21
0D11 CMP    AX,0002	# 2 bytes read?
0D14 JNZ    0D49
0D16 MOV    BX,[082A]	# filehandle
0D1A MOV    DX,0E74	# address of gap
0D1D MOV    CX,00C1
0D20 MOV    AH,3F	# read 193 bytes
0D22 INT    21
0D24 CMP    AX,00C1	# 193 bytes read?
0D27 JNZ    0D49
0D29 MOV    BX,[082A]	# filehandle
0D2D MOV    DX,0F35	# 0E72+2+192+1
0D30 MOV    CX,[0E72]	# get length from first 2 bytes of file
0D34 MOV    AH,3F	# read rest of file
0D36 INT    21
0D38 CMP    AX,[0E72]	# got all?
0D3C JNZ    0D49
0D3E MOV    BX,[082A]	# filehandle
0D42 MOV    AH,3E	# close(BX)
0D44 INT    21
0D46 JMP    0086

0D49 MOV    BX,[082A]	# filehandle
0D4D MOV    AH,3E	# close(BX)
0D4F INT    21
0D51 MOV    DX,08DA
0D54 CALL   0FB4	# READ ERROR
0D57 JMP    0CAF

[F1]           [F2]           [F3]           [F4]           [F5] DISP
[F6]           [F7]           [F8]           [F9]           [F10] MENU
0D5A MOV    DX,08FB
0D5D CALL   0FB4
0D60 MOV    WORD [0A44],08E7
0D66 CMP    BYTE [082C],00
0D6B JNZ    0D83
0D6D MOV    CL,00
0D6F MOV    CH,15
0D71 MOV    DL,4F
0D73 MOV    DH,15
0D75 MOV    AX,0600	# Clear part of screen
0D78 MOV    BX,0700
0D7B INT    10

0D7D MOV    DX,0865
0D80 CALL   0FB4	# FILENAME :       
0D83 MOV    DX,0854
0D86 CALL   0FB4
0D89 MOV    BH,0A
0D8B MOV    BL,[082C]
0D8F MOV    DL,0E
0D91 MOV    DH,15
0D93 CALL   0DD2
0D96 MOV    [082C],BL
0D9A CMP    BL,00
0D9D JZ     0D5A
0D9F MOV    CL,BL
0DA1 XOR    CH,CH
0DA3 MOV    SI,0A4A
0DA6 MOV    DI,082D
0DA9 REP    MOVSB  
0DAB MOV    SI,083C
0DAE CALL   1010
0DB1 MOV    CL,09
0DB3 MOV    CH,14
0DB5 MOV    DL,17
0DB7 MOV    DH,14
0DB9 MOV    AX,0600	# Clear part of screen
0DBC MOV    BX,0700
0DBF INT    10

0DC1 MOV    CL,00
0DC3 MOV    CH,16
0DC5 MOV    DL,4F
0DC7 MOV    DH,16
0DC9 MOV    AX,0600	# Clear part of screen
0DCC MOV    BX,0700
0DCF INT    10
0DD1 RET    

0DD2 CLD    
0DD3 AND    BYTE [0A49],7F
0DD8 MOV    [0A46],DX
0DDC MOV    DI,0A4A
0DDF TEST   BH,80
0DE2 JZ     0DEB
0DE4 MOV    BYTE [0A48],00
0DE9 JMPS   0DFC
0DEB MOV    [0A48],BL
0DEF CMP    BL,00
0DF2 JZ     0DFC
0DF4 PUSH   BX
0DF5 XOR    BH,BH
0DF7 ADD    DI,BX
0DF9 POP    BX
0DFA JMPS   0E04
0DFC TEST   BH,80
0DFF JNZ    0E04
0E01 CALL   0F15
0E04 AND    BH,7F
0E07 XCHG   BH,BL
0E09 PUSH   BX
0E0A XOR    BH,BH
0E0C MOV    BYTE 0A4A[BX],FF
0E11 POP    BX
0E12 PUSH   BX
0E13 PUSH   DI
0E14 MOV    DX,[0A46]
0E18 CALL   0FC4
0E1B CALL   0F6A
0E1E MOV    SI,0A4A
0E21 CALL   0F82
0E24 CALL   0F72
0E27 POP    DI
0E28 POP    BX
0E29 MOV    DX,[0A46]
0E2D ADD    DL,[0A48]
0E31 CALL   0FC4
0E34 CALL   0FCD	# getchar()
0E37 JNB    0E8B
0E39 CMP    AL,53
0E3B JNZ    0E4D
0E3D AND    BYTE [0A49],7F
0E42 CMP    BH,[0A48]
0E46 JZ     0E29
0E48 CALL   0F3C
0E4B JMPS   0E12
0E4D CMP    AL,4B
0E4F JNZ    0E64
0E51 AND    BYTE [0A49],7F
0E56 MOV    AL,[0A48]
0E59 CMP    AL,00
0E5B JZ     0E29
0E5D DEC    DI
0E5E DEC    BYTE [0A48]
0E62 JMPS   0E29
0E64 CMP    AL,4D
0E66 JNZ    0E7A
0E68 AND    BYTE [0A49],7F
0E6D CMP    BH,[0A48]
0E71 JBE    0E29
0E73 INC    DI
0E74 INC    BYTE [0A48]
0E78 JMPS   0E29
0E7A CMP    AL,52
0E7C JNZ    0E12
0E7E CMP    BH,[0A48]
0E82 JBE    0E29
0E84 XOR    BYTE [0A49],80
0E89 JMPS   0E29
0E8B CMP    AL,0D
0E8D JNZ    0EA3
0E8F XCHG   BH,BL
0E91 PUSH   BX
0E92 XOR    BH,BH
0E94 MOV    BYTE 0A4A[BX],FF
0E99 CALL   0F6A
0E9C AND    BYTE [0A49],00
0EA1 POP    BX
0EA2 RET    

0EA3 CMP    AL,08
0EA5 JNZ    0EB4
0EA7 CMP    BYTE [0A48],00
0EAC JZ     0EB1
0EAE CALL   0F23
0EB1 JMP    0E12
0EB4 CMP    BH,[0A48]
0EB8 JZ     0EC1
0EBA TEST   BYTE [0A49],80
0EBF JZ     0EC8
0EC1 CMP    BL,BH
0EC3 JA     0EC8
0EC5 JMP    0E29
0EC8 MOV    CX,0008
0ECB PUSH   DI
0ECC MOV    DI,0A3C
0ECF REPNE  SCASB  
0ED1 JNZ    0EDD
0ED3 MOV    DI,0A34
0ED6 ADD    DI,CX
0ED8 MOV    AL,[DI]
0EDA POP    DI
0EDB JMPS   0EF9
0EDD POP    DI
0EDE CMP    AL,20
0EE0 JB     0F12
0EE2 CMP    AL,7A
0EE4 JA     0F12
0EE6 TEST   BYTE [0A49],01
0EEB JZ     0EF9
0EED CMP    AL,61
0EEF JB     0EF9
0EF1 CMP    AL,7A
0EF3 JA     0EF9
0EF5 SUB    AL,61
0EF7 ADD    AL,41
0EF9 TEST   BYTE [0A49],80
0EFE JZ     0F05
0F00 CALL   0F51
0F03 JMPS   0F0E
0F05 STOSB  
0F06 CMP    BH,[0A48]
0F0A JNZ    0F0E
0F0C INC    BH
0F0E INC    BYTE [0A48]
0F12 JMP    0E12
0F15 MOV    DI,0A4A
0F18 PUSH   DI
0F19 MOV    CX,0014
0F1C MOV    AX,2020
0F1F REP    STOSW  
0F21 POP    DI
0F22 RET    

0F23 DEC    BH
0F25 MOV    CL,BH
0F27 DEC    BYTE [0A48]
0F2B SUB    CL,[0A48]
0F2F XOR    CH,CH
0F31 MOV    SI,DI
0F33 DEC    DI
0F34 PUSH   DI
0F35 REP    MOVSB  
0F37 MOV    BYTE [DI],20
0F3A POP    DI
0F3B RET    

0F3C DEC    BH
0F3E MOV    CL,BH
0F40 SUB    CL,[0A48]
0F44 XOR    CH,CH
0F46 MOV    SI,DI
0F48 INC    SI
0F49 PUSH   DI
0F4A REP    MOVSB  
0F4C MOV    BYTE [DI],20
0F4F POP    DI
0F50 RET    

0F51 PUSH   AX
0F52 MOV    CL,BH
0F54 SUB    CL,[0A48]
0F58 XOR    CH,CH
0F5A PUSH   DI
0F5B ADD    DI,CX
0F5D MOV    SI,DI
0F5F DEC    SI
0F60 STD    
0F61 REP    MOVSB  
0F63 CLD    
0F64 POP    DI
0F65 POP    AX
0F66 STOSB  
0F67 INC    BH
0F69 RET    

0F6A MOV    AH,01	# Set cursor type
0F6C MOV    CX,2B0C
0F6F INT    10
0F71 RET    

0F72 MOV    AH,01	# Set cursor type
0F74 MOV    CX,0607
0F77 INT    10
0F79 RET    

0F7A MOV    AH,01	# Set cursor type
0F7C MOV    CX,0006
0F7F INT    10
0F81 RET    

0F82 CLD    
0F83 LODSB  
0F84 CMP    AL,FF
0F86 JZ     0FB3
0F88 MOV    CX,0008
0F8B MOV    DI,0A34
0F8E REPNE  SCASB  
0F90 JNZ    0F9B
0F92 MOV    DI,0A3C
0F95 ADD    DI,CX
0F97 MOV    AL,[DI]
0F99 JMPS   0FA3
0F9B CMP    AL,20
0F9D JB     0FAB
0F9F CMP    AL,7F
0FA1 JA     0FAB
0FA3 MOV    DL,AL
0FA5 MOV    AH,02	# putc(DL)
0FA7 INT    21
0FA9 JMPS   0F83

0FAB MOV    DL,FE
0FAD MOV    AH,02	# putc('~')
0FAF INT    21
0FB1 JMPS   0F83
0FB3 RET    

0FB4 PUSH   DX
0FB5 XCHG   BX,DX
0FB7 MOV    DX,[BX]
0FB9 CALL   0FC4
0FBC POP    DX
0FBD INC    DX
0FBE INC    DX
0FBF MOV    AH,09	# puts(DX)
0FC1 INT    21
0FC3 RET    

0FC4 PUSH   BX
0FC5 XOR    BH,BH
0FC7 MOV    AH,02	# Set cursor position
0FC9 INT    10
0FCB POP    BX
0FCC RET    

0FCD XOR    AL,AL
0FCF MOV    AH,0C	# flush input buffer
0FD1 INT    21
0FD3 MOV    AH,08	# charcter input without echo
0FD5 INT    21
0FD7 CMP    AL,00	# extended code (like F1..F10)?
0FD9 JZ     0FDD
0FDB CLC    		# CLear Carry flag
0FDC RET    

0FDD MOV    AH,0B	# Check input status
0FDF INT    21
0FE1 CMP    AL,FF	# at least one char is available
0FE3 JNZ    100C
0FE5 MOV    AH,08	# char input without echo
0FE7 INT    21
0FE9 CMP    AL,3B
0FEB JB     100E
0FED CMP    AL,44
0FEF JA     100E
0FF1 SUB    AL,3B
0FF3 SHL    AL,1
0FF5 XOR    AH,AH
0FF7 PUSH   BX
0FF8 PUSH   SI
0FF9 MOV    BX,AX
0FFB MOV    SI,[0A44]
0FFF CMP    WORD [BX+SI],0000
1002 JZ     100A
1004 MOV    SP,[0004]
1008 JMP    [BX+SI]
100A POP    SI
100B POP    BX
100C MOV    AL,00
100E STC		# SeT Carry flag
100F RET    

1010 XOR    BX,BX
1012 CMP    BYTE [SI],FF
1015 JZ     101B
1017 MOVSB  
1018 INC    BX
1019 JMPS   1012
101B RET    

101C MOV    AL,[SI]
101E MOV    CX,0008
1021 MOV    DI,0A34
1024 REPNE  SCASB  
1026 JNZ    1031
1028 MOV    DI,0A3C
102B ADD    DI,CX
102D MOV    AL,[DI]
102F JMPS   103F
1031 CMP    AL,FF
1033 JZ     1047
1035 CMP    AL,20
1037 JB     103D
1039 CMP    AL,80
103B JB     103F
103D MOV    AL,20
103F CALL   1048
1042 JNZ    1047
1044 INC    SI
1045 JMPS   101C
1047 RET    

1048 XOR    AH,AH	# '\0'
104A XOR    DX,DX	# LPT1
104C INT    17		# Write char to printer
104E TEST   AH,01	# printer time out?
1051 RET    

1052 MOV    DX,0B4C	# DUMP:  PRESS SPACEBAR
1055 CALL   0FB4

[F1]           [F2]           [F3]           [F4]           [F5] DISP
[F6]           [F6]           [F8]           [F9]           [F10] MENU
1058 MOV    DX,0ABA
105B CALL   0FB4
105E MOV    WORD [0A44],0AA6
1064 CALL   0FCD	# getchar()
1067 JB     1064
1069 CMP    AL,20	# AL == ' '?
106B JNZ    1064
106D MOV    CL,09
106F MOV    CH,14
1071 MOV    DL,17
1073 MOV    DH,14
1075 MOV    AX,0600	# Clear part of screen
1078 MOV    BX,0700
107B INT    10

107D MOV    CL,00
107F MOV    CH,16
1081 MOV    DL,4F
1083 MOV    DH,18
1085 MOV    AX,0600	# Clear part of screen
1088 MOV    BX,0700
108B INT    10

108D MOV    BYTE [0E70],00
1092 MOV    SI,0A7C
1095 MOV    DI,0E66
1098 MOV    CX,0003
109B REP    MOVSB  
109D CALL   13DA	# get to COM1
10A0 OR     AL,AL
10A2 JZ     10A7
10A4 JMP    115F
10A7 MOV    SI,0A7C
10AA MOV    DI,0E66
10AD MOV    CX,0003
10B0 REP    MOVSB  
10B2 CALL   13DA	# get to COM1
10B5 OR     AL,AL
10B7 JZ     10BC
10B9 JMP    115F
10BC MOV    DX,0B64	# IFU <-- TB
10BF CALL   0FB4
10C2 MOV    SI,0A85
10C5 MOV    DI,0E66
10C8 MOV    CX,000B
10CB REP    MOVSB  
10CD CALL   13DA	# get to COM1
10D0 OR     AL,AL
10D2 JZ     10D7
10D4 JMP    115F
10D7 MOV    SI,0A90
10DA MOV    DI,0E66
10DD MOV    CX,000B
10E0 REP    MOVSB  
10E2 CALL   13DA	# get to COM1
10E5 OR     AL,AL
10E7 JNZ    115F
10E9 MOV    BX,[0F5F]
10ED XCHG   BL,BH
10EF SUB    BX,8000
10F3 CMP    BX,1FEF
10F7 JZ     115F
10F9 MOV    [0A9D],BX
10FD MOV    AX,[0F63]
1100 XCHG   AL,AH
1102 SUB    AX,8000
1105 MOV    [0A9F],AX
1108 SUB    AX,BX
110A JNZ    1111
110C MOV    AX,1FEF
110F JMPS   1105
1111 INC    AX
1112 MOV    [0AA3],AX
1115 MOV    SI,0A9B
1118 MOV    DI,0E66
111B MOV    CX,000B
111E REP    MOVSB  
1120 CALL   13DA	# get to COM1
1123 OR     AL,AL
1125 JNZ    115F
1127 MOV    AL,FF
1129 STOSB  
112A STOSB  
112B STOSB  
112C MOV    BYTE [0E70],00
1131 MOV    SI,0A82
1134 MOV    DI,0E66
1137 MOV    CX,0003
113A REP    MOVSB  
113C CALL   13DA	# get to COM1
113F OR     AL,AL
1141 JNZ    115F
1143 MOV    AX,[0AA3]
1146 ADD    AX,0003
1149 MOV    [0E72],AX		# store length of buffer
114C CMP    BYTE [0006],01
1151 JNZ    1156
1153 JMP    0086
1156 MOV    DX,0B7E		# DUMP OK
1159 CALL   0FB4
115C JMP    0069
115F MOV    BYTE [0E70],00
1164 MOV    SI,0A7F
1167 MOV    DI,0E66
116A MOV    CX,0003
116D REP    MOVSB  
116F CALL   13DA	# get to COM1
1172 MOV    BYTE [0F35],FF	# buffer[195] := 0xFF -> empty
1177 MOV    DX,0B71
117A CALL   0FB4		# DUMP ERROR
117D JMP    1052
1180 CLD    
1181 MOV    CL,00
1183 MOV    CH,00
1185 MOV    DL,4F
1187 MOV    DH,18
1189 MOV    AX,0600	# Clear part of screen
118C MOV    BX,0700
118F INT    10

1191 MOV    SI,0B8C
1194 MOV    DI,0E66
1197 MOV    CX,000B
119A REP    MOVSB  
119C CALL   13DA	# get to COM1
119F MOV    DI,0BA3
11A2 ADD    DI,001E
11A5 MOV    CX,0004
11A8 MOV    AL,FF
11AA STOSB  
11AB ADD    DI,001F
11AE LOOP   11AA
11B0 MOV    BYTE [0BA2],01
11B5 CALL   123E
11B8 INC    BYTE [0BA2]
11BC CMP    BYTE [0BA2],05
11C1 JNZ    11B5
11C3 MOV    BYTE [0BA2],01

[F1] SET       [F2] CLEAR     [F3] IFU -> TB [F4] CANCEL    [F5]      
[F6]           [F7]           [F8]           [F9]           [F10] MENU
11C8 MOV    DX,0C5F
11CB CALL   0FB4
11CE MOV    WORD [0A44],0C23
11D4 MOV    CL,[0BA2]
11D8 MOV    DX,0505
11DB DEC    CL
11DD MOV    AL,03
11DF MUL    CL
11E1 ADD    DH,AL
11E3 CALL   0FC4
11E6 CALL   0F7A
11E9 CALL   0FCD	# getchar()
11EC JNB    11D4
11EE CMP    AL,50
11F0 JNZ    1216
11F2 MOV    CL,00
11F4 MOV    CH,15
11F6 MOV    DL,4F
11F8 MOV    DH,15
11FA MOV    AX,0600	# Clear part of screen
11FD MOV    BX,0700
1200 INT    10

1202 MOV    AL,[0BA2]
1205 CMP    AL,04
1207 JNB    120F
1209 INC    BYTE [0BA2]
120D JMPS   11D4
120F MOV    BYTE [0BA2],01
1214 JMPS   11D4
1216 CMP    AL,48
1218 JNZ    11D4
121A MOV    CL,00
121C MOV    CH,15
121E MOV    DL,4F
1220 MOV    DH,15
1222 MOV    AX,0600	# Clear part of screen
1225 MOV    BX,0700
1228 INT    10

122A MOV    AL,[0BA2]
122D CMP    AL,01
122F JBE    1237
1231 DEC    BYTE [0BA2]
1235 JMPS   11D4
1237 MOV    BYTE [0BA2],04
123C JMPS   11D4
123E CALL   0F6A
1241 MOV    CL,[0BA2]
1245 MOV    DX,0206
1248 MOV    AL,03
124A MUL    CL
124C ADD    DH,AL
124E CALL   0FC4
1251 MOV    DX,0E16
1254 MOV    AH,09	# puts(DX)
1256 INT    21

1258 MOV    AL,[0BA2]
125B OR     AL,30
125D MOV    DL,AL
125F MOV    AH,02	# putc(DL)
1261 INT    21

1263 MOV    DL,3A
1265 MOV    AH,02	# putc(':')
1267 INT    21

1269 MOV    SI,0BA3
126C MOV    CL,[0BA2]
1270 MOV    AL,20
1272 DEC    CL
1274 MUL    CL
1276 ADD    SI,AX
1278 CALL   0F82
127B RET    

[F1]           [F2]           [F3]           [F4] CANCEL    [F5] 
[F6]           [F7]           [F8]           [F9]           [F10] MENU
127C MOV    DX,0CF4
127F CALL   0FB4
1282 MOV    WORD [0A44],0C37
1288 CALL   0F15
128B MOV    SI,0BA3
128E MOV    CL,[0BA2]
1292 DEC    CL
1294 MOV    AL,20
1296 MUL    CL
1298 ADD    SI,AX
129A PUSH   DI
129B PUSH   SI
129C CALL   1010
129F POP    DI
12A0 PUSH   DI
12A1 OR     BX,BX
12A3 JZ     12AE
12A5 CMP    BYTE FF[BX+DI],20
12A9 JNZ    12AE
12AB DEC    BX
12AC JNZ    12A5
12AE MOV    BH,1E
12B0 OR     BH,80
12B3 MOV    CL,[0BA2]
12B7 MOV    DX,050C
12BA MOV    AL,03
12BC DEC    CL
12BE MUL    CL
12C0 ADD    DH,AL
12C2 OR     BYTE [0A49],01
12C7 CALL   0DD2
12CA POP    DI
12CB PUSH   DI
12CC MOV    CX,001E
12CF MOV    AL,20
12D1 REP    STOSB  
12D3 POP    DI
12D4 POP    SI
12D5 CALL   1010
12D8 JMP    11C8
12DB CALL   123E
12DE JMP    11C8
12E1 CALL   0F6A
12E4 MOV    DX,0E42
12E7 CALL   0FB4	# NOTE CLEAR :  ARE YOU SURE [Y/N]?

[F1] YES       [F2] NO        [F3]           [F4]           [F5]
[F6]           [F7]           [F8]           [F9]           [F10] MENU
12EA MOV    DX,0D89
12ED CALL   0FB4
12F0 MOV    WORD [0A44],0C4B
12F6 JMP    11D4
12F9 MOV    DI,0BA3
12FC MOV    CL,[0BA2]
1300 MOV    AL,20
1302 DEC    CL
1304 MUL    CL
1306 ADD    DI,AX
1308 MOV    CX,001E
130B MOV    AL,20
130D REP    STOSB  
130F CALL   123E
1312 MOV    CL,00
1314 MOV    CH,15
1316 MOV    DL,4F
1318 MOV    DH,15
131A MOV    AX,0600	# Clear part of screen
131D MOV    BX,0700
1320 INT    10

1322 JMP    11C8
1325 CALL   0F6A
1328 MOV    CL,00
132A MOV    CH,15
132C MOV    DL,4F
132E MOV    DH,15
1330 MOV    AX,0600	# Clear part of screen
1333 MOV    BX,0700
1336 INT    10

1338 MOV    DX,0E1B
133B CALL   0FB4	# IFU --> TB
133E MOV    CL,09
1340 MOV    CH,14
1342 MOV    DL,16
1344 MOV    DH,14
1346 MOV    AX,0600	# Clear part of screen
1349 MOV    BX,0700
134C INT    10

134E MOV    CL,00
1350 MOV    CH,16
1352 MOV    DL,4F
1354 MOV    DH,18
1356 MOV    AX,0600	# Clear part of screen
1359 MOV    BX,0700
135C INT    10

135E MOV    BYTE [0E70],00
1363 MOV    SI,0A7C
1366 MOV    DI,0E66
1369 MOV    CX,0003
136C REP    MOVSB  
136E CALL   13DA	# get to COM1
1371 OR     AL,AL
1373 JNZ    139E
1375 MOV    BYTE [0E70],00
137A MOV    SI,0A7C
137D MOV    DI,0E66
1380 MOV    CX,0003
1383 REP    MOVSB  
1385 CALL   13DA	# get to COM1
1388 OR     AL,AL
138A JNZ    139E
138C MOV    SI,0B97
138F MOV    DI,0E66
1392 MOV    CX,000B
1395 REP    MOVSB  
1397 CALL   13DA	# get to COM1
139A OR     AL,AL
139C JZ     13BA
139E MOV    BYTE [0E70],00
13A3 MOV    SI,0A7F
13A6 MOV    DI,0E66
13A9 MOV    CX,0003
13AC REP    MOVSB  
13AE CALL   13DA	# get to COM1
13B1 MOV    DX,0E28
13B4 CALL   0FB4	# SEND ERROR
13B7 JMP    11C8
13BA MOV    BYTE [0E70],00
13BF MOV    SI,0A7F
13C2 MOV    DI,0E66
13C5 MOV    CX,0003
13C8 REP    MOVSB  
13CA CALL   13DA	# get to COM1
13CD OR     AL,AL
13CF JNZ    139E
13D1 MOV    DX,0E35
13D4 CALL   0FB4	# SEND OK   
13D7 JMP    11C8

13DA PUSH   DS		# attach COM1
13DB MOV    DX,0040
13DE MOV    DS,DX
13E0 XOR    SI,SI
13E2 MOV    DX,[SI]
13E4 POP    DS
13E5 OR     DX,DX
13E7 JNZ    13EC
13E9 MOV    AL,FF	# return ERROR
13EB RET    

13EC PUSH   DX
13ED XOR    DX,DX	# COM1
13EF MOV    AL,A7	# 2400 Baud, Parity None, 2 Stop bits, 8 Bits
13F1 XOR    AH,AH	# Initialize communications port
13F3 INT    14
13F5 POP    DX

13F6 ADD    DX,0004
13F9 MOV    AL,02
13FB OUT    DX,AL
13FC ADD    DX,0002
13FF XOR    CX,CX
1401 IN     AL,DX
1402 TEST   AL,10
1404 JNZ    140B
1406 LOOP   1401
1408 MOV    AL,01
140A RET    

140B MOV    CX,0800	# too little loopcounter?
140E IN     AL,DX
140F TEST   AL,10
1411 JZ     13FF
1413 LOOP   140E
1415 SUB    DX,0002
1418 MOV    AL,00
141A OUT    DX,AL
141B ADD    DX,0002
141E XOR    CX,CX
1420 IN     AL,DX
1421 TEST   AL,10
1423 JZ     142A
1425 LOOP   1420
1427 MOV    AL,02
1429 RET    

142A CLD    
142B MOV    SI,0E66
142E MOV    CX,0006
1431 SUB    DX,0006
1434 LODSB  
1435 PUSH   CX
1436 CALL   14ED
1439 POP    CX
143A JB     1440
143C LOOP   1434
143E JMPS   1443
1440 MOV    AL,03
1442 RET    

1443 ADD    DX,0006
1446 XOR    CX,CX
1448 IN     AL,DX
1449 TEST   AL,10
144B JNZ    1452
144D LOOP   1448
144F MOV    AL,04
1451 RET    

1452 XOR    CX,CX
1454 IN     AL,DX
1455 TEST   AL,10
1457 JZ     145E
1459 LOOP   1454
145B MOV    AL,05
145D RET    

145E MOV    AL,[0E70]
1461 AND    AL,AL
1463 JZ     146D
1465 DEC    AL
1467 JZ     1470
1469 DEC    AL
146B JZ     1470
146D MOV    AL,00
146F RET    

1470 XOR    CX,CX
1472 NOP    
1473 NOP    
1474 LOOP   1472
1476 SUB    DX,0002
1479 MOV    AL,02
147B OUT    DX,AL
147C ADD    DX,0002
147F XOR    CX,CX
1481 IN     AL,DX
1482 TEST   AL,10
1484 JNZ    148B
1486 LOOP   1481
1488 MOV    AL,06
148A RET    

148B MOV    AL,[0E70]
148E MOV    BYTE [0E70],00
1493 PUSH   AX
1494 MOV    SI,[0E6C]
1498 MOV    DI,[0E6C]
149C MOV    CX,[0E6E]
14A0 DEC    DX
14A1 MOV    AL,60
14A3 OUT    DX,AL
14A4 DEC    DX
14A5 MOV    AL,00
14A7 OUT    DX,AL
14A8 SUB    DX,0004
14AB POP    AX
14AC CMP    AL,02
14AE JNZ    14BE
14B0 ADD    DX,0006
14B3 IN     AL,DX
14B4 TEST   AL,10
14B6 JNZ    14B3
14B8 SUB    DX,0006
14BB JMP    1434
14BE PUSH   CX
14BF CALL   1515
14C2 POP    CX
14C3 JB     14EA
14C5 MOV    [DI],AL
14C7 ADD    DX,0006
14CA IN     AL,DX
14CB TEST   AL,10
14CD JNZ    14D6
14CF INC    DI
14D0 DEC    CX
14D1 SUB    DX,0006
14D4 JMPS   14DD
14D6 IN     AL,DX
14D7 TEST   AL,10
14D9 JNZ    14D6
14DB JMPS   1476
14DD PUSH   CX
14DE CALL   1515
14E1 POP    CX
14E2 JB     14EA
14E4 STOSB  
14E5 LOOP   14DD
14E7 JMP    1443
14EA MOV    AL,07
14EC RET    

14ED PUSH   AX
14EE ADD    DX,0005
14F1 XOR    CX,CX
14F3 IN     AL,DX
14F4 TEST   AL,20
14F6 JNZ    14FD
14F8 LOOP   14F3
14FA POP    AX
14FB STC    		# SeT Carry flag
14FC RET    

14FD POP    AX
14FE SUB    DX,0005
1501 OUT    DX,AL
1502 ADD    DX,0005
1505 XOR    CX,CX
1507 IN     AL,DX
1508 TEST   AL,20
150A JNZ    1510
150C LOOP   1507
150E STC    		# SeT Carry Flag
150F RET    

1510 SUB    DX,0005
1513 CLC    		# CLear Carry
1514 RET    

1515 ADD    DX,0005
1518 XOR    CX,CX
151A IN     AL,DX
151B TEST   AL,01
151D JNZ    1523
151F LOOP   151A
1521 STC    		# SeT Carry Flag
1522 RET    

1523 SUB    DX,0005
1526 IN     AL,DX
1527 CLC    		# CLear Carry
1528 RET    

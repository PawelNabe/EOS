/* (C) Copyright by PaN Super Sonic Software Service 2002	*/
/*                  expert for hi tec & low budget		*/

Here are the values.

(Byte00>>1)&0x7f frameno in BCD format

(Byte01>>2)&0x3f shutter speed
	{ 0x00, "????" },
	{ 0x03, "bulb" },
	{ 0x04, " 30\"" },
	{ 0x05, " 20\"" },
	{ 0x06, " 15\"" },
	{ 0x07, " 10\"" },
	{ 0x08, "  8\"" },
	{ 0x09, "  6\"" },
	{ 0x0A, "  4\"" },
	{ 0x0B, "  3\"" },
	{ 0x0C, "  2\"" },
	{ 0x0D, " 1\"5" },
	{ 0x0E, "  1\"" },
	{ 0x0F, " 0\"7" },
	{ 0x10, "   2" },
	{ 0x11, "   3" },
	{ 0x12, "   4" },
	{ 0x13, "   6" },
	{ 0x14, "   8" },
	{ 0x15, "  10" },
	{ 0x16, "  15" },
	{ 0x17, "  20" },
	{ 0x18, "  30" },
	{ 0x19, "  45" },
	{ 0x1a, "  60" },
	{ 0x1b, "  90" },
	{ 0x1c, " 125" },
	{ 0x1d, " 180" },
	{ 0x1e, " 250" },
	{ 0x1f, " 350" },
	{ 0x20, " 500" },
	{ 0x21, " 750" },
	{ 0x22, "1000" },
	{ 0x23, "1500" },
	{ 0x24, "2000" },
	{ 0x25, "3000" },
	{ 0x26, "4000" },
	{ 0x2f, "----" },

(Byte02>>2)&0x1f aperture value
	 { 0x00, "SDx" },	x is M or A
	 { 0x01, "SD1" },
	 { 0x02, "SD2" },
	 { 0x03, "1.2" },
	 { 0x04, "1.4" },
	 { 0x05, "1.8" },
	 { 0x06, "2.0" },
	 { 0x07, "2.5" },
	 { 0x08, "2.8" },
	 { 0x09, "3.5" },
	 { 0x0A, "4.0" },
	 { 0x0B, "4.5" },
	 { 0x0C, "5.6" },
	 { 0x0D, "6.7" },
	 { 0x0E, "8.0" },
	 { 0x0F, "9.5" },
	 { 0x10, " 11" },
	 { 0x11, " 13" },
	 { 0x12, " 16" },
	 { 0x13, " 19" },
	 { 0x14, " 22" },
	 { 0x15, " 27" },
	 { 0x16, " 32" },

BCD(Byte03)*100+BCD(Byte04) are the overal frame counter.

Byte05 is index into lens table and month BCD.

Byte06 ist the year in BCD format
Byte 7 ist the date in BCD format
Byte08 ist the hour in BCD format
Byte09 ist the minute in BCD format

Byte10&0x7e ist the ISO value
	{ 0x00, "????" },

	{ 0x10, "   6" },
	{ 0x12, "   8" },
	{ 0x14, "  10" },

	{ 0x18, "  12" },
	{ 0x1a, "  16" },
	{ 0x1c, "  20" },

	{ 0x20, "  25" },
	{ 0x22, "  32" },
	{ 0x24, "  40" },

	{ 0x28, "  50" },
	{ 0x2a, "  64" },
	{ 0x2c, "  80" },

	{ 0x30, " 100" },
	{ 0x32, " 125" },
	{ 0x34, " 160" },

	{ 0x38, " 200" },
	{ 0x3a, " 250" },
	{ 0x3c, " 320" },

	{ 0x40, " 400" },
	{ 0x42, " 500" },
	{ 0x44, " 640" },

	{ 0x48, " 800" },
	{ 0x4a, "1000" },
	{ 0x4c, "1250" },

	{ 0x50, "1600" },
	{ 0x52, "2000" },
	{ 0x54, "2500" },

	{ 0x58, "3200" },
	{ 0x5a, "4000" },
	{ 0x5c, "5000" },

	{ 0x60, "6400" },

Byte 11 Flash values
	{ 0x00, "    " },
	{ 0x01, "FL1 " },
	{ 0x02, "MAN." },
	{ 0x03, "ATTL" },
	{ 0x04, "CATS" },
	{ 0x05, "TTL " },
	{ 0x06, "FL6 " },
	{ 0x07, "FEL " },


static valstr aemvals[] = {
	{ 0x00, "PRG" },
	{ 0x01, "P  " },
	{ 0x02, "TV " },
	{ 0x03, "AV " },
};

static valstr corvals[] = {
	{ 0x0a, "-2.0" },
	{ 0x0b, "-5/3" },
	{ 0x0c, "-4/3" },
	{ 0x0d, "-1.0" },
	{ 0x0e, "-2/3" },
	{ 0x0f, "-1/3" },
	{ 0x00, "-0.0" },
	{ 0x00, " 0.0" },
	{ 0x00, "+0.0" },
	{ 0x00, "----" },
	{ 0x00, "    " },
	{ 0x01, "+1/3" },
	{ 0x02, "+2/3" },
	{ 0x03, "+1.0" },
	{ 0x04, "+4/3" },
	{ 0x05, "+5/3" },
	{ 0x06, "+2.0" },
};

static valstr metvals[] = {
	{ 0x01, "[]" }, /* AVR  */
	{ 0x02, "* " }, /* PART */
	{ 0x03, ". " }, /* SPOT */
};

static valstr lensvals[] = { 
	{  0, "--\0\0\0\0\0" },
	{  1, "28\0\0\0\0\0" },
	{  2, "50\0\0\0\0\0" },
	{  3, "135\0\0\0\0" },
	{  4, "35-70\0\0" },
	{  5, "35-105\0" },
	{  6, "75-200\0" },
	{  7, "100-300" },
	{  8, "User1\0\0" },
	{  9, "User2\0\0" },
	{ 10, "User3\0\0" },
	{ 11, "User4\0\0" },
};

static char lensNibble2Byte(nib)
int nib;
{
	switch (nib &= 0x0F) {
		case 0x0e:
			return(' ');
		case 0x0c:
			return('-');
		case 0x00:
		case 0x01:
		case 0x02:
		case 0x03:
		case 0x04:
		case 0x05:
		case 0x06:
		case 0x07:
		case 0x08:
		case 0x09:
			return('0' + nib);
		default:
			fprintf(stderr, "Invalid lens byte %d\n", nib);
	}
	return('\0');
} /* lensNibble2Byte */

static void setLensData(dest, src)
char *dest, src[];
{
	register int i;
	register char *pdest = dest;

	for (i = 3; i >= 0; --i) {
		register int n;

		*pdest++ = lensNibble2Byte(src[i] >> 4);
		*pdest++ = i ? lensNibble2Byte(src[i]     ) : '\0';
	}
	for (pdest -= 2; (pdest >= dest) && (pdest[0] == ' '); --pdest)
			pdest[0] = '\0';
} /* setLensData */

